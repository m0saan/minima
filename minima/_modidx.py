# Autogenerated by nbdev

d = { 'settings': { 'branch': 'main',
                'doc_baseurl': '/minima',
                'doc_host': 'https://m0saan.github.io',
                'git_url': 'https://github.com/m0saan/minima',
                'lib_path': 'minima'},
  'syms': { 'minima.autograd': { 'minima.autograd.CPUDevice': ('autograd.html#cpudevice', 'minima/autograd.py'),
                                 'minima.autograd.CPUDevice.__eq__': ('autograd.html#cpudevice.__eq__', 'minima/autograd.py'),
                                 'minima.autograd.CPUDevice.__hash__': ('autograd.html#cpudevice.__hash__', 'minima/autograd.py'),
                                 'minima.autograd.CPUDevice.__repr__': ('autograd.html#cpudevice.__repr__', 'minima/autograd.py'),
                                 'minima.autograd.CPUDevice.enabled': ('autograd.html#cpudevice.enabled', 'minima/autograd.py'),
                                 'minima.autograd.CPUDevice.one_hot': ('autograd.html#cpudevice.one_hot', 'minima/autograd.py'),
                                 'minima.autograd.CPUDevice.ones': ('autograd.html#cpudevice.ones', 'minima/autograd.py'),
                                 'minima.autograd.CPUDevice.rand': ('autograd.html#cpudevice.rand', 'minima/autograd.py'),
                                 'minima.autograd.CPUDevice.randn': ('autograd.html#cpudevice.randn', 'minima/autograd.py'),
                                 'minima.autograd.CPUDevice.zeros': ('autograd.html#cpudevice.zeros', 'minima/autograd.py'),
                                 'minima.autograd.Device': ('autograd.html#device', 'minima/autograd.py'),
                                 'minima.autograd.Operator': ('autograd.html#operator', 'minima/autograd.py'),
                                 'minima.autograd.Operator.__call__': ('autograd.html#operator.__call__', 'minima/autograd.py'),
                                 'minima.autograd.Operator.compute': ('autograd.html#operator.compute', 'minima/autograd.py'),
                                 'minima.autograd.Operator.gradient': ('autograd.html#operator.gradient', 'minima/autograd.py'),
                                 'minima.autograd.Tensor': ('autograd.html#tensor', 'minima/autograd.py'),
                                 'minima.autograd.Tensor.T': ('autograd.html#tensor.t', 'minima/autograd.py'),
                                 'minima.autograd.Tensor.__add__': ('autograd.html#tensor.__add__', 'minima/autograd.py'),
                                 'minima.autograd.Tensor.__getitem__': ('autograd.html#tensor.__getitem__', 'minima/autograd.py'),
                                 'minima.autograd.Tensor.__init__': ('autograd.html#tensor.__init__', 'minima/autograd.py'),
                                 'minima.autograd.Tensor.__len__': ('autograd.html#tensor.__len__', 'minima/autograd.py'),
                                 'minima.autograd.Tensor.__matmul__': ('autograd.html#tensor.__matmul__', 'minima/autograd.py'),
                                 'minima.autograd.Tensor.__mul__': ('autograd.html#tensor.__mul__', 'minima/autograd.py'),
                                 'minima.autograd.Tensor.__neg__': ('autograd.html#tensor.__neg__', 'minima/autograd.py'),
                                 'minima.autograd.Tensor.__pow__': ('autograd.html#tensor.__pow__', 'minima/autograd.py'),
                                 'minima.autograd.Tensor.__repr__': ('autograd.html#tensor.__repr__', 'minima/autograd.py'),
                                 'minima.autograd.Tensor.__rtruediv__': ('autograd.html#tensor.__rtruediv__', 'minima/autograd.py'),
                                 'minima.autograd.Tensor.__setitem__': ('autograd.html#tensor.__setitem__', 'minima/autograd.py'),
                                 'minima.autograd.Tensor.__str__': ('autograd.html#tensor.__str__', 'minima/autograd.py'),
                                 'minima.autograd.Tensor.__sub__': ('autograd.html#tensor.__sub__', 'minima/autograd.py'),
                                 'minima.autograd.Tensor.__truediv__': ('autograd.html#tensor.__truediv__', 'minima/autograd.py'),
                                 'minima.autograd.Tensor._array_from_numpy': ( 'autograd.html#tensor._array_from_numpy',
                                                                               'minima/autograd.py'),
                                 'minima.autograd.Tensor._init': ('autograd.html#tensor._init', 'minima/autograd.py'),
                                 'minima.autograd.Tensor.backward': ('autograd.html#tensor.backward', 'minima/autograd.py'),
                                 'minima.autograd.Tensor.broadcast_to': ('autograd.html#tensor.broadcast_to', 'minima/autograd.py'),
                                 'minima.autograd.Tensor.create_detached_tensor': ( 'autograd.html#tensor.create_detached_tensor',
                                                                                    'minima/autograd.py'),
                                 'minima.autograd.Tensor.data': ('autograd.html#tensor.data', 'minima/autograd.py'),
                                 'minima.autograd.Tensor.detach': ('autograd.html#tensor.detach', 'minima/autograd.py'),
                                 'minima.autograd.Tensor.device': ('autograd.html#tensor.device', 'minima/autograd.py'),
                                 'minima.autograd.Tensor.dtype': ('autograd.html#tensor.dtype', 'minima/autograd.py'),
                                 'minima.autograd.Tensor.exp': ('autograd.html#tensor.exp', 'minima/autograd.py'),
                                 'minima.autograd.Tensor.make_from_op': ('autograd.html#tensor.make_from_op', 'minima/autograd.py'),
                                 'minima.autograd.Tensor.matmul': ('autograd.html#tensor.matmul', 'minima/autograd.py'),
                                 'minima.autograd.Tensor.numpy': ('autograd.html#tensor.numpy', 'minima/autograd.py'),
                                 'minima.autograd.Tensor.reshape': ('autograd.html#tensor.reshape', 'minima/autograd.py'),
                                 'minima.autograd.Tensor.shape': ('autograd.html#tensor.shape', 'minima/autograd.py'),
                                 'minima.autograd.Tensor.sum': ('autograd.html#tensor.sum', 'minima/autograd.py'),
                                 'minima.autograd.Tensor.transpose': ('autograd.html#tensor.transpose', 'minima/autograd.py'),
                                 'minima.autograd.TensorOp': ('autograd.html#tensorop', 'minima/autograd.py'),
                                 'minima.autograd.TensorOp.__call__': ('autograd.html#tensorop.__call__', 'minima/autograd.py'),
                                 'minima.autograd.Value': ('autograd.html#value', 'minima/autograd.py'),
                                 'minima.autograd.Value.__add__': ('autograd.html#value.__add__', 'minima/autograd.py'),
                                 'minima.autograd.Value.__del__': ('autograd.html#value.__del__', 'minima/autograd.py'),
                                 'minima.autograd.Value.__init__': ('autograd.html#value.__init__', 'minima/autograd.py'),
                                 'minima.autograd.Value.__mul__': ('autograd.html#value.__mul__', 'minima/autograd.py'),
                                 'minima.autograd.Value.__neg__': ('autograd.html#value.__neg__', 'minima/autograd.py'),
                                 'minima.autograd.Value.__pow__': ('autograd.html#value.__pow__', 'minima/autograd.py'),
                                 'minima.autograd.Value.__radd__': ('autograd.html#value.__radd__', 'minima/autograd.py'),
                                 'minima.autograd.Value.__repr__': ('autograd.html#value.__repr__', 'minima/autograd.py'),
                                 'minima.autograd.Value.__rmul__': ('autograd.html#value.__rmul__', 'minima/autograd.py'),
                                 'minima.autograd.Value.__rsub__': ('autograd.html#value.__rsub__', 'minima/autograd.py'),
                                 'minima.autograd.Value.__sub__': ('autograd.html#value.__sub__', 'minima/autograd.py'),
                                 'minima.autograd.Value.__truediv__': ('autograd.html#value.__truediv__', 'minima/autograd.py'),
                                 'minima.autograd.Value._topological_sort': ('autograd.html#value._topological_sort', 'minima/autograd.py'),
                                 'minima.autograd.Value.backward': ('autograd.html#value.backward', 'minima/autograd.py'),
                                 'minima.autograd.Value.compute_cached_data': ( 'autograd.html#value.compute_cached_data',
                                                                                'minima/autograd.py'),
                                 'minima.autograd.Value.data': ('autograd.html#value.data', 'minima/autograd.py'),
                                 'minima.autograd.Value.exp': ('autograd.html#value.exp', 'minima/autograd.py'),
                                 'minima.autograd.Value.is_leaf': ('autograd.html#value.is_leaf', 'minima/autograd.py'),
                                 'minima.autograd.Value.item': ('autograd.html#value.item', 'minima/autograd.py'),
                                 'minima.autograd.Value.relu': ('autograd.html#value.relu', 'minima/autograd.py'),
                                 'minima.autograd.Value.tanh': ('autograd.html#value.tanh', 'minima/autograd.py'),
                                 'minima.autograd.all_devices': ('autograd.html#all_devices', 'minima/autograd.py'),
                                 'minima.autograd.cpu': ('autograd.html#cpu', 'minima/autograd.py')},
            'minima.data': { 'minima.data.BatchSampler': ('data.html#batchsampler', 'minima/data.py'),
                             'minima.data.BatchSampler.__init__': ('data.html#batchsampler.__init__', 'minima/data.py'),
                             'minima.data.BatchSampler.__iter__': ('data.html#batchsampler.__iter__', 'minima/data.py'),
                             'minima.data.DataLoader': ('data.html#dataloader', 'minima/data.py'),
                             'minima.data.DataLoader.__init__': ('data.html#dataloader.__init__', 'minima/data.py'),
                             'minima.data.DataLoader.__iter__': ('data.html#dataloader.__iter__', 'minima/data.py'),
                             'minima.data.Dataset': ('data.html#dataset', 'minima/data.py'),
                             'minima.data.Dataset.__getitem__': ('data.html#dataset.__getitem__', 'minima/data.py'),
                             'minima.data.Dataset.__init__': ('data.html#dataset.__init__', 'minima/data.py'),
                             'minima.data.Dataset.__len__': ('data.html#dataset.__len__', 'minima/data.py'),
                             'minima.data.Dataset.apply_transforms': ('data.html#dataset.apply_transforms', 'minima/data.py'),
                             'minima.data.Sampler': ('data.html#sampler', 'minima/data.py'),
                             'minima.data.Sampler.__init__': ('data.html#sampler.__init__', 'minima/data.py'),
                             'minima.data.Sampler.__iter__': ('data.html#sampler.__iter__', 'minima/data.py')},
            'minima.init': { 'minima.init.constant': ('init.html#constant', 'minima/init.py'),
                             'minima.init.kaiming_normal': ('init.html#kaiming_normal', 'minima/init.py'),
                             'minima.init.kaiming_uniform': ('init.html#kaiming_uniform', 'minima/init.py'),
                             'minima.init.one_hot': ('init.html#one_hot', 'minima/init.py'),
                             'minima.init.ones': ('init.html#ones', 'minima/init.py'),
                             'minima.init.rand': ('init.html#rand', 'minima/init.py'),
                             'minima.init.randb': ('init.html#randb', 'minima/init.py'),
                             'minima.init.randn': ('init.html#randn', 'minima/init.py'),
                             'minima.init.xavier_normal': ('init.html#xavier_normal', 'minima/init.py'),
                             'minima.init.xavier_uniform': ('init.html#xavier_uniform', 'minima/init.py'),
                             'minima.init.zeros': ('init.html#zeros', 'minima/init.py')},
            'minima.ndarray': {},
            'minima.ndarray_backend_numpy': { 'minima.ndarray_backend_numpy.Array': ( 'ndarray_backend_numpy.html#array',
                                                                                      'minima/ndarray_backend_numpy.py'),
                                              'minima.ndarray_backend_numpy.Array.__init__': ( 'ndarray_backend_numpy.html#array.__init__',
                                                                                               'minima/ndarray_backend_numpy.py'),
                                              'minima.ndarray_backend_numpy.Array.__repr__': ( 'ndarray_backend_numpy.html#array.__repr__',
                                                                                               'minima/ndarray_backend_numpy.py'),
                                              'minima.ndarray_backend_numpy.Array.size': ( 'ndarray_backend_numpy.html#array.size',
                                                                                           'minima/ndarray_backend_numpy.py'),
                                              'minima.ndarray_backend_numpy.compact': ( 'ndarray_backend_numpy.html#compact',
                                                                                        'minima/ndarray_backend_numpy.py'),
                                              'minima.ndarray_backend_numpy.ewise_add': ( 'ndarray_backend_numpy.html#ewise_add',
                                                                                          'minima/ndarray_backend_numpy.py'),
                                              'minima.ndarray_backend_numpy.ewise_div': ( 'ndarray_backend_numpy.html#ewise_div',
                                                                                          'minima/ndarray_backend_numpy.py'),
                                              'minima.ndarray_backend_numpy.ewise_eq': ( 'ndarray_backend_numpy.html#ewise_eq',
                                                                                         'minima/ndarray_backend_numpy.py'),
                                              'minima.ndarray_backend_numpy.ewise_exp': ( 'ndarray_backend_numpy.html#ewise_exp',
                                                                                          'minima/ndarray_backend_numpy.py'),
                                              'minima.ndarray_backend_numpy.ewise_ge': ( 'ndarray_backend_numpy.html#ewise_ge',
                                                                                         'minima/ndarray_backend_numpy.py'),
                                              'minima.ndarray_backend_numpy.ewise_log': ( 'ndarray_backend_numpy.html#ewise_log',
                                                                                          'minima/ndarray_backend_numpy.py'),
                                              'minima.ndarray_backend_numpy.ewise_maximum': ( 'ndarray_backend_numpy.html#ewise_maximum',
                                                                                              'minima/ndarray_backend_numpy.py'),
                                              'minima.ndarray_backend_numpy.ewise_mul': ( 'ndarray_backend_numpy.html#ewise_mul',
                                                                                          'minima/ndarray_backend_numpy.py'),
                                              'minima.ndarray_backend_numpy.ewise_setitem': ( 'ndarray_backend_numpy.html#ewise_setitem',
                                                                                              'minima/ndarray_backend_numpy.py'),
                                              'minima.ndarray_backend_numpy.ewise_tanh': ( 'ndarray_backend_numpy.html#ewise_tanh',
                                                                                           'minima/ndarray_backend_numpy.py'),
                                              'minima.ndarray_backend_numpy.fill': ( 'ndarray_backend_numpy.html#fill',
                                                                                     'minima/ndarray_backend_numpy.py'),
                                              'minima.ndarray_backend_numpy.from_numpy': ( 'ndarray_backend_numpy.html#from_numpy',
                                                                                           'minima/ndarray_backend_numpy.py'),
                                              'minima.ndarray_backend_numpy.matmul': ( 'ndarray_backend_numpy.html#matmul',
                                                                                       'minima/ndarray_backend_numpy.py'),
                                              'minima.ndarray_backend_numpy.reduce_max': ( 'ndarray_backend_numpy.html#reduce_max',
                                                                                           'minima/ndarray_backend_numpy.py'),
                                              'minima.ndarray_backend_numpy.reduce_sum': ( 'ndarray_backend_numpy.html#reduce_sum',
                                                                                           'minima/ndarray_backend_numpy.py'),
                                              'minima.ndarray_backend_numpy.scalar_add': ( 'ndarray_backend_numpy.html#scalar_add',
                                                                                           'minima/ndarray_backend_numpy.py'),
                                              'minima.ndarray_backend_numpy.scalar_div': ( 'ndarray_backend_numpy.html#scalar_div',
                                                                                           'minima/ndarray_backend_numpy.py'),
                                              'minima.ndarray_backend_numpy.scalar_eq': ( 'ndarray_backend_numpy.html#scalar_eq',
                                                                                          'minima/ndarray_backend_numpy.py'),
                                              'minima.ndarray_backend_numpy.scalar_ge': ( 'ndarray_backend_numpy.html#scalar_ge',
                                                                                          'minima/ndarray_backend_numpy.py'),
                                              'minima.ndarray_backend_numpy.scalar_maximum': ( 'ndarray_backend_numpy.html#scalar_maximum',
                                                                                               'minima/ndarray_backend_numpy.py'),
                                              'minima.ndarray_backend_numpy.scalar_mul': ( 'ndarray_backend_numpy.html#scalar_mul',
                                                                                           'minima/ndarray_backend_numpy.py'),
                                              'minima.ndarray_backend_numpy.scalar_power': ( 'ndarray_backend_numpy.html#scalar_power',
                                                                                             'minima/ndarray_backend_numpy.py'),
                                              'minima.ndarray_backend_numpy.scalar_setitem': ( 'ndarray_backend_numpy.html#scalar_setitem',
                                                                                               'minima/ndarray_backend_numpy.py'),
                                              'minima.ndarray_backend_numpy.to_numpy': ( 'ndarray_backend_numpy.html#to_numpy',
                                                                                         'minima/ndarray_backend_numpy.py')},
            'minima.nn': { 'minima.nn.BatchNorm1d': ('nn.html#batchnorm1d', 'minima/nn.py'),
                           'minima.nn.BatchNorm1d.__init__': ('nn.html#batchnorm1d.__init__', 'minima/nn.py'),
                           'minima.nn.BatchNorm1d.forward': ('nn.html#batchnorm1d.forward', 'minima/nn.py'),
                           'minima.nn.BatchNorm1d.update_stats': ('nn.html#batchnorm1d.update_stats', 'minima/nn.py'),
                           'minima.nn.CrossEntropyLoss': ('nn.html#crossentropyloss', 'minima/nn.py'),
                           'minima.nn.CrossEntropyLoss.forward': ('nn.html#crossentropyloss.forward', 'minima/nn.py'),
                           'minima.nn.Dropout': ('nn.html#dropout', 'minima/nn.py'),
                           'minima.nn.Dropout.__init__': ('nn.html#dropout.__init__', 'minima/nn.py'),
                           'minima.nn.Dropout.forward': ('nn.html#dropout.forward', 'minima/nn.py'),
                           'minima.nn.Flatten': ('nn.html#flatten', 'minima/nn.py'),
                           'minima.nn.Flatten.forward': ('nn.html#flatten.forward', 'minima/nn.py'),
                           'minima.nn.Identity': ('nn.html#identity', 'minima/nn.py'),
                           'minima.nn.Identity.forward': ('nn.html#identity.forward', 'minima/nn.py'),
                           'minima.nn.LayerNorm1d': ('nn.html#layernorm1d', 'minima/nn.py'),
                           'minima.nn.LayerNorm1d.__init__': ('nn.html#layernorm1d.__init__', 'minima/nn.py'),
                           'minima.nn.LayerNorm1d.forward': ('nn.html#layernorm1d.forward', 'minima/nn.py'),
                           'minima.nn.Linear': ('nn.html#linear', 'minima/nn.py'),
                           'minima.nn.Linear.__init__': ('nn.html#linear.__init__', 'minima/nn.py'),
                           'minima.nn.Linear.__repr__': ('nn.html#linear.__repr__', 'minima/nn.py'),
                           'minima.nn.Linear.forward': ('nn.html#linear.forward', 'minima/nn.py'),
                           'minima.nn.Module': ('nn.html#module', 'minima/nn.py'),
                           'minima.nn.Module.__call__': ('nn.html#module.__call__', 'minima/nn.py'),
                           'minima.nn.Module.__init__': ('nn.html#module.__init__', 'minima/nn.py'),
                           'minima.nn.Module._children': ('nn.html#module._children', 'minima/nn.py'),
                           'minima.nn.Module.eval': ('nn.html#module.eval', 'minima/nn.py'),
                           'minima.nn.Module.parameters': ('nn.html#module.parameters', 'minima/nn.py'),
                           'minima.nn.Module.train': ('nn.html#module.train', 'minima/nn.py'),
                           'minima.nn.Parameter': ('nn.html#parameter', 'minima/nn.py'),
                           'minima.nn.ReLU': ('nn.html#relu', 'minima/nn.py'),
                           'minima.nn.ReLU.forward': ('nn.html#relu.forward', 'minima/nn.py'),
                           'minima.nn.Residual': ('nn.html#residual', 'minima/nn.py'),
                           'minima.nn.Residual.__init__': ('nn.html#residual.__init__', 'minima/nn.py'),
                           'minima.nn.Residual.forward': ('nn.html#residual.forward', 'minima/nn.py'),
                           'minima.nn.Sequential': ('nn.html#sequential', 'minima/nn.py'),
                           'minima.nn.Sequential.__init__': ('nn.html#sequential.__init__', 'minima/nn.py'),
                           'minima.nn.Sequential.forward': ('nn.html#sequential.forward', 'minima/nn.py'),
                           'minima.nn._child_modules': ('nn.html#_child_modules', 'minima/nn.py'),
                           'minima.nn._unpack_params': ('nn.html#_unpack_params', 'minima/nn.py')},
            'minima.operators': { 'minima.operators.AddScalar': ('operators.html#addscalar', 'minima/operators.py'),
                                  'minima.operators.AddScalar.__init__': ('operators.html#addscalar.__init__', 'minima/operators.py'),
                                  'minima.operators.AddScalar.compute': ('operators.html#addscalar.compute', 'minima/operators.py'),
                                  'minima.operators.AddScalar.gradient': ('operators.html#addscalar.gradient', 'minima/operators.py'),
                                  'minima.operators.BroadcastTo': ('operators.html#broadcastto', 'minima/operators.py'),
                                  'minima.operators.BroadcastTo.__init__': ('operators.html#broadcastto.__init__', 'minima/operators.py'),
                                  'minima.operators.BroadcastTo.compute': ('operators.html#broadcastto.compute', 'minima/operators.py'),
                                  'minima.operators.BroadcastTo.gradient': ('operators.html#broadcastto.gradient', 'minima/operators.py'),
                                  'minima.operators.DivScalar': ('operators.html#divscalar', 'minima/operators.py'),
                                  'minima.operators.DivScalar.__init__': ('operators.html#divscalar.__init__', 'minima/operators.py'),
                                  'minima.operators.DivScalar.compute': ('operators.html#divscalar.compute', 'minima/operators.py'),
                                  'minima.operators.DivScalar.gradient': ('operators.html#divscalar.gradient', 'minima/operators.py'),
                                  'minima.operators.EWiseAdd': ('operators.html#ewiseadd', 'minima/operators.py'),
                                  'minima.operators.EWiseAdd.compute': ('operators.html#ewiseadd.compute', 'minima/operators.py'),
                                  'minima.operators.EWiseAdd.gradient': ('operators.html#ewiseadd.gradient', 'minima/operators.py'),
                                  'minima.operators.EWiseDiv': ('operators.html#ewisediv', 'minima/operators.py'),
                                  'minima.operators.EWiseDiv.compute': ('operators.html#ewisediv.compute', 'minima/operators.py'),
                                  'minima.operators.EWiseDiv.gradient': ('operators.html#ewisediv.gradient', 'minima/operators.py'),
                                  'minima.operators.EWiseMul': ('operators.html#ewisemul', 'minima/operators.py'),
                                  'minima.operators.EWiseMul.compute': ('operators.html#ewisemul.compute', 'minima/operators.py'),
                                  'minima.operators.EWiseMul.gradient': ('operators.html#ewisemul.gradient', 'minima/operators.py'),
                                  'minima.operators.Exp': ('operators.html#exp', 'minima/operators.py'),
                                  'minima.operators.Exp.compute': ('operators.html#exp.compute', 'minima/operators.py'),
                                  'minima.operators.Exp.gradient': ('operators.html#exp.gradient', 'minima/operators.py'),
                                  'minima.operators.LogSumExp': ('operators.html#logsumexp', 'minima/operators.py'),
                                  'minima.operators.LogSumExp.__init__': ('operators.html#logsumexp.__init__', 'minima/operators.py'),
                                  'minima.operators.LogSumExp.compute': ('operators.html#logsumexp.compute', 'minima/operators.py'),
                                  'minima.operators.LogSumExp.gradient': ('operators.html#logsumexp.gradient', 'minima/operators.py'),
                                  'minima.operators.MatMul': ('operators.html#matmul', 'minima/operators.py'),
                                  'minima.operators.MatMul.compute': ('operators.html#matmul.compute', 'minima/operators.py'),
                                  'minima.operators.MatMul.gradient': ('operators.html#matmul.gradient', 'minima/operators.py'),
                                  'minima.operators.MulScalar': ('operators.html#mulscalar', 'minima/operators.py'),
                                  'minima.operators.MulScalar.__init__': ('operators.html#mulscalar.__init__', 'minima/operators.py'),
                                  'minima.operators.MulScalar.compute': ('operators.html#mulscalar.compute', 'minima/operators.py'),
                                  'minima.operators.MulScalar.gradient': ('operators.html#mulscalar.gradient', 'minima/operators.py'),
                                  'minima.operators.Negate': ('operators.html#negate', 'minima/operators.py'),
                                  'minima.operators.Negate.compute': ('operators.html#negate.compute', 'minima/operators.py'),
                                  'minima.operators.Negate.gradient': ('operators.html#negate.gradient', 'minima/operators.py'),
                                  'minima.operators.PowerScalar': ('operators.html#powerscalar', 'minima/operators.py'),
                                  'minima.operators.PowerScalar.__init__': ('operators.html#powerscalar.__init__', 'minima/operators.py'),
                                  'minima.operators.PowerScalar.compute': ('operators.html#powerscalar.compute', 'minima/operators.py'),
                                  'minima.operators.PowerScalar.gradient': ('operators.html#powerscalar.gradient', 'minima/operators.py'),
                                  'minima.operators.ReLU': ('operators.html#relu', 'minima/operators.py'),
                                  'minima.operators.ReLU.compute': ('operators.html#relu.compute', 'minima/operators.py'),
                                  'minima.operators.ReLU.gradient': ('operators.html#relu.gradient', 'minima/operators.py'),
                                  'minima.operators.Reshape': ('operators.html#reshape', 'minima/operators.py'),
                                  'minima.operators.Reshape.__init__': ('operators.html#reshape.__init__', 'minima/operators.py'),
                                  'minima.operators.Reshape.compute': ('operators.html#reshape.compute', 'minima/operators.py'),
                                  'minima.operators.Reshape.gradient': ('operators.html#reshape.gradient', 'minima/operators.py'),
                                  'minima.operators.Summation': ('operators.html#summation', 'minima/operators.py'),
                                  'minima.operators.Summation.__init__': ('operators.html#summation.__init__', 'minima/operators.py'),
                                  'minima.operators.Summation.compute': ('operators.html#summation.compute', 'minima/operators.py'),
                                  'minima.operators.Summation.gradient': ('operators.html#summation.gradient', 'minima/operators.py'),
                                  'minima.operators.Transpose': ('operators.html#transpose', 'minima/operators.py'),
                                  'minima.operators.Transpose.__init__': ('operators.html#transpose.__init__', 'minima/operators.py'),
                                  'minima.operators.Transpose.compute': ('operators.html#transpose.compute', 'minima/operators.py'),
                                  'minima.operators.Transpose.gradient': ('operators.html#transpose.gradient', 'minima/operators.py'),
                                  'minima.operators.add': ('operators.html#add', 'minima/operators.py'),
                                  'minima.operators.add_scalar': ('operators.html#add_scalar', 'minima/operators.py'),
                                  'minima.operators.broadcast_to': ('operators.html#broadcast_to', 'minima/operators.py'),
                                  'minima.operators.divide': ('operators.html#divide', 'minima/operators.py'),
                                  'minima.operators.divide_scalar': ('operators.html#divide_scalar', 'minima/operators.py'),
                                  'minima.operators.exp': ('operators.html#exp', 'minima/operators.py'),
                                  'minima.operators.logsumexp': ('operators.html#logsumexp', 'minima/operators.py'),
                                  'minima.operators.matmul': ('operators.html#matmul', 'minima/operators.py'),
                                  'minima.operators.mul_scalar': ('operators.html#mul_scalar', 'minima/operators.py'),
                                  'minima.operators.multiply': ('operators.html#multiply', 'minima/operators.py'),
                                  'minima.operators.negate': ('operators.html#negate', 'minima/operators.py'),
                                  'minima.operators.power_scalar': ('operators.html#power_scalar', 'minima/operators.py'),
                                  'minima.operators.relu': ('operators.html#relu', 'minima/operators.py'),
                                  'minima.operators.reshape': ('operators.html#reshape', 'minima/operators.py'),
                                  'minima.operators.summation': ('operators.html#summation', 'minima/operators.py'),
                                  'minima.operators.transpose': ('operators.html#transpose', 'minima/operators.py')},
            'minima.optim': { 'minima.optim.Adam': ('optim.html#adam', 'minima/optim.py'),
                              'minima.optim.Adam.__init__': ('optim.html#adam.__init__', 'minima/optim.py'),
                              'minima.optim.Adam._opt_step': ('optim.html#adam._opt_step', 'minima/optim.py'),
                              'minima.optim.Adam._reg_step': ('optim.html#adam._reg_step', 'minima/optim.py'),
                              'minima.optim.Adam.step': ('optim.html#adam.step', 'minima/optim.py'),
                              'minima.optim.Optimizer': ('optim.html#optimizer', 'minima/optim.py'),
                              'minima.optim.Optimizer.__init__': ('optim.html#optimizer.__init__', 'minima/optim.py'),
                              'minima.optim.Optimizer.step': ('optim.html#optimizer.step', 'minima/optim.py'),
                              'minima.optim.Optimizer.zero_grad': ('optim.html#optimizer.zero_grad', 'minima/optim.py'),
                              'minima.optim.SGD': ('optim.html#sgd', 'minima/optim.py'),
                              'minima.optim.SGD.__init__': ('optim.html#sgd.__init__', 'minima/optim.py'),
                              'minima.optim.SGD._opt_step': ('optim.html#sgd._opt_step', 'minima/optim.py'),
                              'minima.optim.SGD._reg_step': ('optim.html#sgd._reg_step', 'minima/optim.py'),
                              'minima.optim.SGD.step': ('optim.html#sgd.step', 'minima/optim.py')},
            'minima.utility': {'minima.utility.prod': ('utility.html#prod', 'minima/utility.py')}}}
